#! /usr/bin/env bash
#-------------------------------------------------------------------------------
# File        : .prompt
# Author      : Lewis Russell
# Description : Very useful zsh/csh/tcsh/bash prompt for seamless use with Git
#               and SVN.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
   SHELL="$1"
RET_CODE="$2"
  NO_SCM="$3"
CMD_TIME="$4"

#-------------------------------------------------------------------------------
# Init
#-------------------------------------------------------------------------------
# Unalias all aliases
unalias -a

#-------------------------------------------------------------------------------
# Globals
#-------------------------------------------------------------------------------
CHECKOUT=""
CHECKOUT_IS_TAG=0
AHEAD=""
BEHIND=""
STASHES=""
SUBMODULE_INFO=""
PORCELAIN_INFO=""
LOCAL_BRANCHES=""

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
# FANCY_PROMPT_DOUBLE_LINE

# FANCY_PROMPT_FETCH_TIMEOUT

# FANCY_PROMPT_TIMEOUT

# FANCY_PROMPT_USE_NERD_SYMBOLS
#     NOTE: this is a multi-char symbol which causes glitches with zsh tab
#     completion. e.g. vim <tab> if locale is not setup correctly.
#     export LC_CTYPE=en_US.UTF-8

# FANCY_PROMPT_USE_SYMBOLS

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
var_enabled() {
    [[ "$1" ]] && [[ $1 != 0 ]]
}

check_error() {
    RET_CODE="$1"
    CODE="$2"
    if [ "$RET_CODE" != 0 ]; then
        echo "ERROR $CODE:$RET_CODE"
        exit 1
    fi
}

in_git() {
    [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]
}

in_svn() {
    svn ls --depth empty > /dev/null 2>&1
    return $?
}

get_svn_local_rev() {
    info="$1"
    echo "$info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

get_svn_remote_rev() {
    info="$1"

    repo=$(echo "$info" | grep 'URL' | sed -E 's/URL: (.+)/\1/')

    remote_info=$(timeout "$TIMEOUT" svn info "$repo")
    check_error "$?" "10"

    echo "$remote_info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

vercomp() {
    local i

    if [[ "$1" == "$2" ]]; then
        return 0
    fi

    local ver1; IFS=. read -ra ver1 <<< "$1"
    local ver2; IFS=. read -ra ver2 <<< "$2"

    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((ver1[i] > ver2[i])); then
            return 0
        elif ((ver1[i] < ver2[i])); then
            return 1
        fi
    done
    return 1
}

git_bg_fetch() {
    if [[ -n $(git remote show) ]]; then
        local repo
        repo=$(git rev-parse --show-toplevel 2> /dev/null)

        local fetch_head="$repo/.git/FETCH_HEAD"

        if [[ -e "$fetch_head" ]]; then
            local old_head
            old_head=$(find "$fetch_head" -mmin +"$FETCH_TIMEOUT" 2> /dev/null)

            if [[ -n "$old_head" ]]; then
                echo 'FETCHING'
                touch "$fetch_head"
                git fetch --no-recurse-submodules --quiet &> /dev/null
            fi
        fi
    fi
}

set_git_checkout() {
    local rp
    mapfile -t rp < <(git rev-parse --abbrev-ref HEAD --git-dir '@{u}')

    CHECKOUT="${rp[0]}"

    local git_dir="${rp[1]}"
    local remote_full="${rp[2]}"
    local remote_abbr="${remote_full#*/}"

    if [[ "$CHECKOUT" =~ HEAD ]]; then
        local tag

        # Show short hash if not on a branch
        CHECKOUT=$(git rev-parse --short HEAD)

        if [[ -d "$git_dir/rebase-merge" || -d "$git_dir/rebase-apply" ]]; then
            # Are we rebasing?
            CHECKOUT="$CHECKOUT(rebasing)"
        elif [[ -f "$git_dir/BISECT_START" ]]; then
            # Are we bisecting?
            CHECKOUT="$CHECKOUT(bisecting)"
        elif tag=$(git describe --candidates=1 --exact-match); then
            CHECKOUT=$tag
            CHECKOUT_IS_TAG=1
        fi
    fi

    if [ -n "$remote_abbr" ]; then
        if [ "$CHECKOUT" != "$remote_abbr" ]; then
            CHECKOUT="$CHECKOUT->$remote_abbr"
        fi
    elif [[ $CHECKOUT_IS_TAG != 1 ]]; then
        CHECKOUT="$CHECKOUT!"
    fi
}

set_git_info() {
    local info
    local error

    local git_version
    git_version=$(git --version | sed -E 's/git version ([0-9.]+)/\1/g')

    if vercomp "$git_version" "1.7.2"; then
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --branch --porcelain "$GIT_STATUS_OPTS")
    else
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --porcelain)
    fi
    error=$(check_error "$?" "2")

    SUBMODULE_INFO=$(timeout "$TIMEOUT2" git submodule status --recursive 2> /dev/null)
    # error=$(check_error "$?" "3")

    PORCELAIN_INFO="$info"

    if [ "$error" == "" ]; then
        branch_info=$(head -1 <<< "$info")
         AHEAD=$(grep 'ahead'  <<< "$branch_info" | sed -E  's/.*ahead ([0-9]+).*/\1/g')
        BEHIND=$(grep 'behind' <<< "$branch_info" | sed -E 's/.*behind ([0-9]+).*/\1/g')
        error=$(check_error "$?" "4")

        if [ "$error" == "" ]; then
            STASHES=$(git stash list | wc -l)
            # LOCAL_BRANCHES=$(git branch -vv | cut -c 3- | awk '$3 !~/\[origin/ { print $1 }' | wc -l)
            # LOCAL_BRANCHES=$(git branch | cut -c 3- | grep -v master | wc -l)

            # Local branches that do not have an upstream of the same name
            if vercomp "$git_version" "2.4.0"; then
                LOCAL_BRANCHES=$(git branch -vv --format='%(refname:strip=2)#%(upstream:strip=3)' | grep -vcE '([^#]+)#\1')
            else
                LOCAL_BRANCHES=$(git branch | grep -cv master)
            fi

            if vercomp "$git_version" "1.7.2"; then
                set_git_checkout
            else
                CHECKOUT="!$(git rev-parse --abbrev-ref HEAD)"
            fi
        fi
    fi

    # git_bg_fetch
}

set_svn_info() {
    local info
    local error

    info=$(timeout "$TIMEOUT" svn info)
    error=$(check_error "$?" "7")

    if [ "$error" == "" ]; then
        local local_rev
        local remote_rev

        local_rev=$(get_svn_local_rev "$info")
        remote_rev=$(get_svn_remote_rev "$info")

        if [[ $remote_rev =~ ^[0-9]+$ ]]; then
            BEHIND=$((remote_rev - local_rev))
        else
            error=$(check_error "1" "9")
        fi

        if PORCELAIN_INFO=$(timeout "$TIMEOUT" svn status 2> /dev/null); then
            PORCELAIN_INFO="?"
        fi

        CHECKOUT="r$local_rev"
    fi
}

get_scm_prompt() {
    local src_ctrl=""
    local staged=""
    local tree_deleted=""
    local index_deleted=""
    local unstaged=""
    local untracked="?"
    local conflicts=""
    local co_sym
    local submodule_unsync
    local submodule_uninit

    if [ "$error" == "" ]; then
        # porcelain info should be common between git and svn
        if [ "$PORCELAIN_INFO" != "?" ]; then
            local staged=0
            local index_added=0
            local index_deleted=0
            local tree_deleted=0
            local unstaged=0
            local untracked=0
            local conflicts=0

            local IFS=$'\n'
            for line in $PORCELAIN_INFO; do
                if [[ $line =~ ^[MRC][\ MD]            ]]; then ((staged        ++)); fi
                if [[ $line =~ ^A[\ MD]                ]]; then ((index_added   ++)); fi
                if [[ $line =~ ^D\                     ]]; then ((index_deleted ++)); fi
                if [[ $line =~ ^[\ MARC]D              ]]; then ((tree_deleted  ++)); fi
                if [[ $line =~ ^[\ MARC]M              ]]; then ((unstaged      ++)); fi
                if [[ $line =~ ^\?\?                   ]]; then ((untracked     ++)); fi
                if [[ $line =~ ^(DD|AU|UD|UA|DU|AA|UU) ]]; then ((conflicts     ++)); fi
                # DD  unmerged, both deleted
                # AU  unmerged, added by us
                # UD  unmerged, deleted by them
                # UA  unmerged, added by them
                # DU  unmerged, deleted by us
                # AA  unmerged, both added
                # UU  unmerged, both modified
            done
        fi

        if [ "$SUBMODULE_INFO" != "" ]; then
            submodule_unsync=$(grep -cE '^\+' <<< "$SUBMODULE_INFO")
            submodule_uninit=$(grep -cE '^-'  <<< "$SUBMODULE_INFO")
        else
            submodule_unsync=""
            submodule_uninit=""
        fi

        if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
            if [[ $CHECKOUT_IS_TAG == 1 ]]; then
                co_sym=""
            else
                co_sym=""
            fi
            # co_sym=""
        elif var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
            co_sym=""
        fi

        build_section() {
            local colour=$1
            local symbol=$2
            local value=$3
            if { [[ $value ]] && [[ $value != 0 ]]; }; then
                echo "$colour$symbol$value"
            fi
        }

        # 穀 者 視  

        src_ctrl+=$(build_section "$gray"   "$co_sym" "$CHECKOUT"        )
        src_ctrl+=$(build_section " $white"   ↑        "$AHEAD"           )
        src_ctrl+=$(build_section " $white"   ↓        "$BEHIND"          )
        src_ctrl+=$(build_section " $white"           "$submodule_uninit")
        src_ctrl+=$(build_section " $red"             "$submodule_unsync")
        src_ctrl+=$(build_section " $green"   ●        "$staged"          )
        src_ctrl+=$(build_section " $green"   +        "$index_added"     )
        src_ctrl+=$(build_section " $green"   -        "$index_deleted"   )
        src_ctrl+=$(build_section " $red"     ✖        "$conflicts"       )
        src_ctrl+=$(build_section " $red"     +        "$unstaged"        )
        src_ctrl+=$(build_section " $red"     -        "$tree_deleted"    )
        # src_ctrl+=$(build_section " $magenta" +        "$untracked"       )
        src_ctrl+=$(build_section " $magenta" …        "$untracked"       )
        src_ctrl+=$(build_section " $red"     ⚑        "$STASHES"         )
        src_ctrl+=$(build_section " $yellow"          "$LOCAL_BRANCHES"  )
    else
        src_ctrl+="$red$error"
    fi

    if [[ "$src_ctrl" == '' ]]; then
        src_ctrl='...'
    fi

    printf "%s" "${src_ctl_colour}$src_ctrl$src_ctl_colour"
}

get_prompt_arrow() {
    if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
        if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
            #  
            arrow="❯"
        else
            arrow="▶"
        fi
    else
        arrow=">"
    fi

    echo "$ret_colour$arrow$end"
}

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
GIT_STATUS_OPTS="--ignore-submodules"
        TIMEOUT=${FANCY_PROMPT_TIMEOUT-3}
       TIMEOUT2=$((TIMEOUT*2))
  FETCH_TIMEOUT=${FANCY_PROMPT_FETCH_TIMEOUT-1}

if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
    FANCY_PROMPT_USE_SYMBOLS=1
fi

#-------------------------------------------------------------------------------
# Attributes & Colours
#-------------------------------------------------------------------------------
if [ "$SHELL" == "bash" ]; then
    c_start='\['
      c_end='\]'
       user='\u'
       host='\H'
    if in_git; then
        dir=$(basename "$(git rev-parse --show-toplevel)")/$(git rev-parse --show-prefix)
        dir=${dir%?}  # Remove last /
    else
        dir='\W'
    fi
else # csh, tcsh and zsh
    c_start='%{'
      c_end='%}'
       user='%n'
       host='%m'
    if in_git; then
        dir=$(basename "$(git rev-parse --show-toplevel)")/$(git rev-parse --show-prefix)
        dir=${dir%?}  # Remove last /
    else
        dir='%c'
    fi
fi

   # reverse="${c_start}\\e[3;35m${c_end}"
# underlined="${c_start}\\e[4;35m${c_end}"
       # dim="${c_start}\\e[10;35m${c_end}"
      gray="$c_start\\e[0;90m$c_end"
       red="$c_start\\e[0;31m$c_end"
     green="$c_start\\e[0;32m$c_end"
    yellow="$c_start\\e[0;33m$c_end"
      blue="$c_start\\e[0;34m$c_end"
   magenta="$c_start\\e[0;35m$c_end"
      cyan="$c_start\\e[0;36m$c_end"
     white="$c_start\\e[0;37m$c_end"
       end="$c_start\\e[0m$c_end" # This is needed at the end.

# Use a different colour for each shell.

case "$SHELL" in
    bash) dir_colour="$yellow"  ;;
    zsh)  dir_colour="$green"   ;;
    *)    dir_colour="$magenta" ;;
esac

src_ctl_colour="$gray"

#-------------------------------------------------------------------------------
# Source Control
#-------------------------------------------------------------------------------

# If we a located somewhere deep in .git/.. then navigate out of it to prevent
# the error: "fatal: This operation must be run in a work tree"
if pwd | grep -q "\\.git"; then
    cd "$(pwd | sed -E 's/\.git(\/.*)?//g')" || exit
fi

prompt_info=""
if in_git; then
    if ((!NO_SCM)); then
        set_git_info
    fi
    prompt_info=$(get_scm_prompt)
elif in_svn; then
    if ((!NO_SCM)); then
        set_svn_info
    fi
    prompt_info=$(get_scm_prompt)
fi


#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
prompt=""
prompt+="$blue"
prompt+="$host:"
prompt+="$cyan"
prompt+="$user:"
prompt+="$dir_colour"
prompt+="$dir "

if [ "$RET_CODE" == 0 ]; then
    ret_colour="$cyan"
else
    ret_colour="$red"
fi

convertsecs() {
    ((d=${1}/86400))
    ((h=(${1}/3600)%24))
    ((m=(${1}/60)%60))
    ((s=${1}%60))
    if ((d!=0)); then
        printf "%dd %dh %dm %ds" "$d" "$h" "$m" "$s"
    elif ((h!=0)); then
        printf "%dh %dm %ds" "$h" "$m" "$s"
    elif ((m!=0)); then
        printf "%dm %ds" "$m" "$s"
    else
        printf "%ds" "$s"
    fi
}

prompt_time=''
if [[ $CMD_TIME ]] && ! [[ $CMD_TIME == 0* ]]; then
    prompt_time="$gray$(convertsecs "$CMD_TIME")"
fi

prompt_end="$(get_prompt_arrow) "

if var_enabled "$FANCY_PROMPT_DOUBLE_LINE"; then
    printf "%s" "$prompt_time\\n"
    printf "%s" "$prompt$prompt_info\\n$prompt_end"
else
    printf "%s" "$prompt$prompt_info$prompt_end"
fi
