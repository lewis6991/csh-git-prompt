#!/bin/bash
#-------------------------------------------------------------------------------
# File        : .prompt
# Author      : Lewis Russell
# Description : Very useful csh/tcsh/bash prompt for seamless use with Git and
#               SVN.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
   SHELL="$1"
RET_CODE="$2"

#-------------------------------------------------------------------------------
# Init
#-------------------------------------------------------------------------------
# Unalias all aliases
unalias -a

#-------------------------------------------------------------------------------
# Globals
#-------------------------------------------------------------------------------
CHECKOUT=""
AHEAD=""
BEHIND=""
STASHES=""
PORCELAIN_INFO=""

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
var_enabled() {
    [[ "$1" ]] && [[ $1 != 0 ]]
}

check_error() {
    RET_CODE="$1"
    CODE="$2"
    if [ "$RET_CODE" != 0 ]; then
        echo "ERROR $CODE:$RET_CODE"
        exit 1
    fi
}

in_git() {
    git rev-parse 2> /dev/null
    return $?
}

in_git_svn() {
    return 1
    if [ -d "$(git rev-parse --show-toplevel)/.git/svn" ]; then
        return 1
    else
        return 0
    fi
}

in_svn() {
    svn ls --depth empty > /dev/null 2>&1
    return $?
}

get_svn_local_rev() {
    info="$1"
    echo "$info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

get_svn_remote_rev() {
    info="$1"

    repo=$(echo "$info" | grep 'URL' | sed -E 's/URL: (.+)/\1/')

    remote_info=$(timeout "$TIMEOUT" svn info "$repo")
    check_error "$?" "10"

    echo "$remote_info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

format_value() {
    value=$1
    prefix=$2
    if [ -z "$value" ] || [ "$value" == "0" ]; then
         echo ""
    else
         echo "$prefix$value"
    fi
}

vercomp () {
    if [[ "$1" == "$2" ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 0
        fi
    done
    return 1
}

git_bg_fetch() {
    if [[ -n $(git remote show) ]]; then
        local repo
        local fetch_head

        repo=$(git rev-parse --show-toplevel 2> /dev/null)
        fetch_head="$repo/.git/FETCH_HEAD"

        if [[ -e "$fetch_head" ]]; then
            local old_head

            old_head=$(find "$fetch_head" -mmin +"$FETCH_TIMEOUT" 2> /dev/null)

            if [[ -n "$old_head" ]]; then
                git fetch --quiet &> /dev/null
            fi
        fi
    fi
}

set_git_info() {
    local git_version
    local info

    git_version=$(git --version | sed -E 's/git version ([0-9.]+)/\1/g')

    if vercomp "$git_version" "1.7.2"; then
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --branch --porcelain "$GIT_STATUS_OPTS")
    else
        info=$(timeout "$TIMEOUT2" git status --untracked-files=normal --porcelain)
    fi

    error=$(check_error "$?" "2")

    PORCELAIN_INFO="$info"

    if [ "$error" == "" ]; then
        if in_git_svn; then
            local local_rev
            local remote_rev

            local_rev=$(git svn find-rev HEAD)
            remote_rev=$(git svn find-rev git-svn)

            if [[ $remote_rev =~ ^[0-9]+$ ]]; then
                BEHIND=$((remote_rev - local_rev))
            else
                error=$(check_error "1" "9")
            fi

            if [ "$error" == "" ]; then
                CHECKOUT="r$local_rev"
                git svn fetch &
            fi
        else
            AHEAD=$(echo "$info" | grep 'ahead'  | sed -E  's/.*ahead[[:space:]]+([0-9]+).*/\1/g')
            BEHIND=$(echo "$info" | grep 'behind' | sed -E 's/.*behind[[:space:]]+([0-9]+).*/\1/g')
            error=$(check_error "$?" "4")

            if [ "$error" == "" ]; then
                get_git_checkout() {
                    local info
                    local symbol=""

                    info="$1"

                    CHECKOUT=$(\
                        echo "$info" | \
                        sed 's/\.\.\..*//g' | \
                        sed -E 's/##[[:space:]]+//g' | \
                        sed -n '1 p')
                    error=$(check_error "$?" "5")

                    if [[ "$CHECKOUT" =~ "HEAD" ]]; then
                        # Show short hash if not on a branch
                        CHECKOUT=$(git rev-parse --short HEAD)
                        error=$(check_error "$?" "6")
                    fi

                    if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
                        symbol=""
                        # symbol="" # NERD
                    fi

                    echo "$symbol$CHECKOUT"
                }

                STASHES=$(git stash list | wc -l)
                if vercomp "$git_version" "1.7.2"; then
                    CHECKOUT=$(get_git_checkout "$info")
                else
                    CHECKOUT=$(git rev-parse --abbrev-ref HEAD)
                fi
            fi
        fi
    fi

    git_bg_fetch &
}

set_svn_info() {
    local info
    info=$(timeout "$TIMEOUT" svn info)
    error=$(check_error "$?" "7")
    if [ "$error" == "" ]; then
        local local_rev
        local remote_rev

        local_rev=$(get_svn_local_rev "$info")
        remote_rev=$(get_svn_remote_rev "$info")

        if [[ $remote_rev =~ ^[0-9]+$ ]]; then
            BEHIND=$((remote_rev - local_rev))
        else
            error=$(check_error "1" "9")
        fi

        if PORCELAIN_INFO=$(timeout "$TIMEOUT" svn status 2> /dev/null); then
            PORCELAIN_INFO="?"
        fi

        CHECKOUT="r$local_rev"
    fi
}

get_scm_prompt() {
    local src_ctrl
    local staged=""
    local unstaged=""
    local untracked="?"
    local conflicts=""

    src_ctrl="$src_ctl_colour["

    if [ "$error" == "" ]; then
        if [ "$PORCELAIN_INFO" != "?" ]; then
            staged=$(echo "$PORCELAIN_INFO" | grep -c "^ *A\|^M\|^D\|^R")
            unstaged=$(echo "$PORCELAIN_INFO" | grep -c "^ \+M\|UU")
            untracked=$(echo "$PORCELAIN_INFO" | grep -c "^ *?")
            conflicts=$(echo "$PORCELAIN_INFO" | grep -c "^MM")
        fi

        src_ctrl+="$CHECKOUT"
        src_ctrl+="$white"
        src_ctrl+="$(format_value "$AHEAD" "↑")"
        src_ctrl+="$(format_value "$BEHIND" "↓")"
        src_ctrl+="$green$(format_value "$staged" "●")"
        src_ctrl+="$red$(format_value "$conflicts" "✖")"
        src_ctrl+="$red$(format_value "$unstaged" "✚")"
        src_ctrl+="$magenta$(format_value "$untracked" "…")"
        src_ctrl+="$yellow$(format_value "$STASHES" "⚑")"
    else
        src_ctrl+="$red$error"
    fi
    src_ctrl+="$src_ctl_colour]"

    echo "$src_ctrl"
}

remove_ansi_chars() {
    local expanded
    expanded=$(printf '%b' "$1")
    sed "s/\x1B\[[0-9;]*[a-zA-Z]//g" <<< "$expanded"
}

lhs_rhs_prompt() {
    local lhs=$1
    local rhs=$2
    local cols=$3

    rhs_no_ansi=$(remove_ansi_chars "$rhs")

    # Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
    save='\e[s' # Save cursor position
    rest='\e[u' # Restore cursor to save point

    echo "\[${save}\e[${cols}C\e[${#rhs_no_ansi}D${rhs}${rest}\]$lhs"
}

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
GIT_STATUS_OPTS="--ignore-submodules"
        TIMEOUT=${FANCY_PROMPT_TIMEOUT-3}
       TIMEOUT2=$((TIMEOUT*2))
  FETCH_TIMEOUT=${FANCY_PROMPT_FETCH_TIMEOUT-1}

if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
    FANCY_PROMPT_USE_SYMBOLS=1
fi

#-------------------------------------------------------------------------------
# Attributes & Colours
#-------------------------------------------------------------------------------

if [ "$SHELL" == "bash" ]; then
    c_start=""
      c_end=""
       # user="\u"
        dir="\W"
       host="\H"
else # csh, tcsh and zsh
    c_start="%{"
      c_end="%}"
       # user="%n"
        dir="%c"
       host="%m"
fi

   # reverse="${c_start}\e[3;35m${c_end}"
# underlined="${c_start}\e[4;35m${c_end}"
       # dim="${c_start}\e[10;35m${c_end}"
      gray="${c_start}\e[1;30m${c_end}"
       red="${c_start}\e[1;31m${c_end}"
     green="${c_start}\e[1;32m${c_end}"
    yellow="${c_start}\e[1;33m${c_end}"
      # blue="${c_start}\e[1;34m${c_end}"
   magenta="${c_start}\e[1;35m${c_end}"
      cyan="${c_start}\e[1;36m${c_end}"
     white="${c_start}\e[1;37m${c_end}"
       end="${c_start}\e[0m${c_end}" # This is needed at the end.

# Use a different colour for each shell.
if [ "$SHELL" == "bash" ]; then
    dir_colour="$yellow"
elif [ "$SHELL" == "zsh" ]; then
    dir_colour="$green"
else
    dir_colour="$magenta"
fi

src_ctl_colour="$gray"

#-------------------------------------------------------------------------------
# Return Code
#-------------------------------------------------------------------------------
if [ "$RET_CODE" == 0 ]; then
    ret_colour="$cyan"
else
    ret_colour="$red"
fi

#-------------------------------------------------------------------------------
# Source Control
#-------------------------------------------------------------------------------

# If we a located somewhere deep in .git/.. then navigate out of it to prevent
# the error: "fatal: This operation must be run in a work tree"
if pwd | grep -q "\.git"; then
    cd "$(pwd | sed 's/\.git\(\/.*\)\?//g')" || exit
fi

if in_git; then
    set_git_info
    prompt_info=$(get_scm_prompt)
elif in_svn; then
    set_svn_info
    prompt_info=$(get_scm_prompt)
fi

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
prompt=""

cols=$(tput cols)

# Adjust prompt according on terminal width.
if [ "$cols" -gt 60 ] || ! var_enabled "$FANCY_PROMPT_DYNAMIC_WIDTH"; then
    if [ "$cols" -gt 80 ] || ! var_enabled "$FANCY_PROMPT_DYNAMIC_WIDTH"; then
        prompt+="$cyan"
        prompt+="$host:"
        # prompt+="$user:"
    fi
    prompt+="$dir_colour"
    prompt+="$dir"
fi

if var_enabled "$FANCY_PROMPT_USE_SYMBOLS"; then
    if var_enabled "$FANCY_PROMPT_USE_NERD_SYMBOLS"; then
        #  
        prompt_end="$ret_colour❯$end "
    else
        prompt_end="$ret_colour▶$end "
    fi
else
    prompt_end="$ret_colour>$end "
fi

if var_enabled "$FANCY_PROMPT_RHS_ENABLE"; then
    # TODO: This is buggy when using completion
    lhs_rhs_prompt "$prompt$prompt_end" "$prompt_info" "$cols"
else
    echo "$prompt$prompt_info$prompt_end"
fi
