#!/bin/bash
#-------------------------------------------------------------------------------
# File        : .prompt
# Author      : Lewis Russell
# Description : Very useful csh/tcsh/bash prompt for seamless use with Git and
#               SVN.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Arguments
#-------------------------------------------------------------------------------
   SHELL="$1"
RET_CODE="$2"

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------
  GIT_STATUS_OPTS="--ignore-submodules"
          TIMEOUT=${FANCY_PROMPT_TIMEOUT:-3}
         TIMEOUT2=$(( $TIMEOUT * 2))
    DYNAMIC_WIDTH=${FANCY_PROMPT_DYNAMIC_WIDTH:-1}
      USE_SYMBOLS=${FANCY_PROMP_USE_SYMBOLS:-1}

#-------------------------------------------------------------------------------
# Constants
#-------------------------------------------------------------------------------
   STAGED_PATTERN="^ *A\|^M\|^D\|^R"
 UNSTAGED_PATTERN="^ \+M\|UU"
UNTRACKED_PATTERN="^ *?"

#-------------------------------------------------------------------------------
# Init
#-------------------------------------------------------------------------------
# Unalias all aliases
unalias -a

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
check_error() {
    RET_CODE="$1"
    CODE="$2"
    if [ "$RET_CODE" != 0 ]; then
        echo "ERROR $CODE"
    fi
}

in_git() {
    git rev-parse 2> /dev/null
    return $?
}

in_git_svn() {
    return 1
    if [ -d "$(git rev-parse --show-toplevel)/.git/svn" ]; then
        return 1
    else
        return 0
    fi
}

in_svn() {
    svn ls --depth empty > /dev/null 2>&1
    return $?
}

get_svn_local_rev() {
    info="$1"
    echo "$info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

get_svn_remote_rev() {
    info="$1"

    repo=$(echo "$info" | grep 'URL' | sed -E 's/URL: (.+)/\1/')

    remote_info=$(timeout "$TIMEOUT" svn info "$repo")
    check_error "$?" "10"

    echo "$remote_info" | grep 'Revision' | sed -E 's/Revision: ([0-9]+)/\1/'
}

format_value() {
    value=$1
    prefix=$2
    if [ -z "$value" ] || [ "$value" == "0" ]; then
         echo ""
    else
         echo "$prefix$value"
    fi
}

#-------------------------------------------------------------------------------
# Attributes & Colours
#-------------------------------------------------------------------------------
if [ "$SHELL" == "bash" ]; then
    c_start="\["
      c_end="\]"
       user="\u"
        dir="\W"
       host="\H"
else # csh, tcsh and zsh
    c_start="%{"
      c_end="%}"
       user="%n"
        dir="%c"
       host="%m"
fi

   reverse="${c_start}\e[3;35m${c_end}"
underlined="${c_start}\e[4;35m${c_end}"
       dim="${c_start}\e[10;35m${c_end}"
      gray="${c_start}\e[1;30m${c_end}"
       red="${c_start}\e[1;31m${c_end}"
     green="${c_start}\e[1;32m${c_end}"
    yellow="${c_start}\e[1;33m${c_end}"
      blue="${c_start}\e[1;34m${c_end}"
   magenta="${c_start}\e[1;35m${c_end}"
      cyan="${c_start}\e[1;36m${c_end}"
     white="${c_start}\e[1;37m${c_end}"
       end="${c_start}\e[0m${c_end}" # This is needed at the end.

# Use a different colour for each shell.
if [ "$SHELL" == "bash" ]; then
    dir_colour="$yellow"
elif [ "$SHELL" == "zsh" ]; then
    dir_colour="$green"
else
    dir_colour="$magenta"
fi

src_ctl_colour="$gray"

#-------------------------------------------------------------------------------
# Return Code
#-------------------------------------------------------------------------------
if [ "$RET_CODE" == 0 ]; then
    ret_colour="$cyan"
else
    ret_colour="$red"
fi

#-------------------------------------------------------------------------------
# Source Control
#-------------------------------------------------------------------------------

# If we a located somewhere deep in .git/.. then navigate out of it to prevent
# the error: "fatal: This operation must be run in a work tree"
if pwd | grep -q "\.git"; then
    cd "$(pwd | sed 's/\.git\(\/.*\)\?//g')" || exit
fi

if in_git; then
    has_src_ctrl=1

    info=$(timeout $TIMEOUT2 git status --untracked-files=normal --branch --porcelain $GIT_STATUS_OPTS)
    error=$(check_error "$?" "2")

    files="$info"

    if [ "$error" == "" ]; then
        if in_git_svn; then
            local_rev=$(git svn find-rev HEAD)
            remote_rev=$(git svn find-rev git-svn)
            if [[ $remote_rev =~ ^[0-9]+$ ]]; then
                behind=$((remote_rev - local_rev))
            else
                error=$(check_error "1" "9")
            fi
            if [ "$error" == "" ]; then
                checkout="r$local_rev"
                git svn fetch &
            fi
        else
            ahead=$(echo "$info" | grep 'ahead'  | sed -E  's/.*ahead[[:space:]]+([0-9]+).*/\1/g')
           behind=$(echo "$info" | grep 'behind' | sed -E 's/.*behind[[:space:]]+([0-9]+).*/\1/g')
           error=$(check_error "$?" "4")

           if [ "$error" == "" ]; then
               get_git_checkout() {
                   info="$1"

                   checkout=$(\
                       echo "$info" | \
                       sed 's/\.\.\..*//g' | \
                       sed -E 's/##[[:space:]]+//g' | \
                       sed -n '1 p')
                   error=$(check_error "$?" "5")

                   if [[ "$checkout" =~ "HEAD" ]]; then
                       # Show short hash if not on a branch
                       checkout=$(git rev-parse --short HEAD)
                       error=$(check_error "$?" "6")
                   fi

                   if [ "$USE_SYMBOLS" == 1 ]; then
                       symbol=""
                   else
                       symbol=""
                   fi
                   echo "$symbol$checkout"
               }

               stashed=$(git stash list | wc -l)
               checkout=$(get_git_checkout "$info")
           fi
        fi
    fi
    git fetch --quiet -n > /dev/null 2>&1 &
elif in_svn; then
    has_src_ctrl=1
    info=$(timeout $TIMEOUT svn info)
    error=$(check_error "$?" "7")
    if [ "$error" == "" ]; then
         local_rev=$(get_svn_local_rev  "$info")
        remote_rev=$(get_svn_remote_rev "$info")

        if [[ $remote_rev =~ ^[0-9]+$ ]]; then
            behind=$((remote_rev - local_rev))
        else
            error=$(check_error "1" "9")
        fi

        ahead="" # SVN is never ahead
        if files=$(timeout $TIMEOUT svn status 2> /dev/null); then
            files="?"
        fi

        stashed=""
        checkout="r$local_rev"
    fi
fi

#---------------------------------------------------------------------------
# Status
#---------------------------------------------------------------------------
if [ "$has_src_ctrl" == "1" ]; then
    src_ctrl=""
    src_ctrl+="$src_ctl_colour"
    src_ctrl+="["
    if [ "$error" == "" ]; then
        if [ "$files" == "?" ]; then
            staged=""
            unstaged=""
            untracked="?"
        else
            staged=$(echo "$files" | grep -c "$STAGED_PATTERN")
            staged=$(format_value "$staged" "+")

            unstaged=$(echo "$files" | grep -c "$UNSTAGED_PATTERN")
            unstaged=$(format_value "$unstaged" "~")

            untracked=$(echo "$files" | grep -c "$UNTRACKED_PATTERN")
            untracked=$(format_value "$untracked" "+")
        fi

        ahead=$(format_value "$ahead" "+")
        behind=$(format_value "$behind" "-")
        stashed=$(format_value "$stashed" "^")

        src_ctrl+="$checkout"
        src_ctrl+="$white"
        src_ctrl+="$ahead"
        src_ctrl+="$behind"
        src_ctrl+="$green"
        src_ctrl+="$staged"
        src_ctrl+="$red"
        src_ctrl+="$unstaged"
        src_ctrl+="$magenta"
        src_ctrl+="$untracked"
        src_ctrl+="$yellow"
        src_ctrl+="$stashed"
    else
        src_ctrl+="$red"
        src_ctrl+="$error"
    fi
    src_ctrl+="$src_ctl_colour"
    src_ctrl+="]"
fi

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
prompt=""

cols=$(tput cols)

# Adjust prompt according on terminal width.
if [ "$cols" -gt 60 ] || [ "$DYNAMIC_WIDTH" == 0 ]; then
    if [ "$cols" -gt 80 ] || [ "$DYNAMIC_WIDTH" == 0 ]; then
        prompt+="$cyan"
        prompt+="$host:"
        # prompt+="$user:"
    fi
    prompt+="$dir_colour"
    prompt+="$dir"
fi

prompt+="$src_ctrl"

if [ "$USE_SYMBOLS" == 0 ]; then
    prompt+="$ret_colour>$end "
else
    prompt+="$ret_colour▶$end "
fi

echo "$prompt"
